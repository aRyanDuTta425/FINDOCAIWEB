// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents     Document[]
  conversations ChatConversation[]

  @@map("users")
}

model Document {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  fileUrl     String
  fileType    String
  fileSize    Int
  uploadedAt  DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  ocrData        OCRData?
  analysisResult AnalysisResult?
  embeddings     DocumentEmbedding[]

  @@map("documents")
}

model OCRData {
  id         String   @id @default(cuid())
  text       String
  confidence Float?
  processedAt DateTime @default(now())
  
  documentId String   @unique
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("ocr_data")
}

model AnalysisResult {
  id          String   @id @default(cuid())
  documentType String  // "invoice", "bank_statement", "tax_document", "other"
  
  // Invoice fields
  invoiceNumber String?
  amount        Float?
  dueDate       DateTime?
  vendor        String?
  
  // Bank statement fields
  accountNumber String?
  balance       Float?
  statementDate DateTime?
  
  // Tax document fields
  taxYear       Int?
  taxType       String?
  
  // General fields
  extractedData Json?
  summary       String?
  confidence    Float?
  processedAt   DateTime @default(now())
  
  documentId    String   @unique
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  embeddings    DocumentEmbedding[]

  @@map("analysis_results")
}

model DocumentEmbedding {
  id          String   @id @default(cuid())
  content     String   // Text chunk that was embedded
  embedding   Float[]  // Vector embedding
  chunkIndex  Int      // Position of this chunk in the document
  metadata    Json?    // Additional metadata about the chunk
  createdAt   DateTime @default(now())
  
  // Relations
  documentId       String
  document         Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  analysisResultId String?
  analysisResult   AnalysisResult? @relation(fields: [analysisResultId], references: [id], onDelete: Cascade)

  @@map("document_embeddings")
}

model ChatConversation {
  id        String   @id @default(cuid())
  title     String?  // Auto-generated or user-provided title
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  messages  ChatMessage[]

  @@map("chat_conversations")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  role      String   // "user" or "assistant"
  metadata  Json?    // Store citations, sources, etc.
  createdAt DateTime @default(now())
  
  conversationId String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}
